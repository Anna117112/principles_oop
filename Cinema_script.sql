-- MySQL Script generated by MySQL Workbench
-- Mon Mar  6 09:15:06 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema cinema
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema cinema
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cinema` DEFAULT CHARACTER SET utf8 ;
USE `cinema` ;

-- -----------------------------------------------------
-- Table `cinema`.`movie`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`movie` (
  `id` INT NOT NULL,
  `moviesname` VARCHAR(45) NULL,
  `long` INT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cinema`.`price`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`price` (
  `id` INT NOT NULL,
  `chanch` DECIMAL NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cinema`.`sessions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`sessions` (
  `id` INT NOT NULL,
  `session_start` TIME NULL,
  `session_break` TIME NULL,
  `movie_id` INT NOT NULL,
  `price_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_sessions_movie_idx` (`movie_id` ASC) VISIBLE,
  INDEX `fk_sessions_price1_idx` (`price_id` ASC) VISIBLE,
  CONSTRAINT `fk_sessions_movie`
    FOREIGN KEY (`movie_id`)
    REFERENCES `cinema`.`movie` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sessions_price1`
    FOREIGN KEY (`price_id`)
    REFERENCES `cinema`.`price` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cinema`.`tickets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`tickets` (
  `id` INT NOT NULL,
  `sessions_id` INT NOT NULL,
  `count` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_tickets_sessions1_idx` (`sessions_id` ASC) VISIBLE,
  CONSTRAINT `fk_tickets_sessions1`
    FOREIGN KEY (`sessions_id`)
    REFERENCES `cinema`.`sessions` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

INSERT INTO `cinema`.`movie` (`id`, `moviesname`, `long`) VALUES ('1', 'movie1', '90');
INSERT INTO `cinema`.`movie` (`id`, `moviesname`, `long`) VALUES ('2', 'movie2', '120');
INSERT INTO `cinema`.`movie` (`id`, `moviesname`, `long`) VALUES ('3', 'movie3', '60');
INSERT INTO `cinema`.`movie` (`id`, `moviesname`, `long`) VALUES ('4', 'movie4', '90');

INSERT INTO `cinema`.`price` (`id`, `chanch`) VALUES ('1', '100');
INSERT INTO `cinema`.`price` (`id`, `chanch`) VALUES ('2', '200');
INSERT INTO `cinema`.`price` (`id`, `chanch`) VALUES ('3', '300');
INSERT INTO `cinema`.`price` (`id`, `chanch`) VALUES ('4', '400');


INSERT INTO `cinema`.`sessions` (`id`, `session_start`, `session_break`, `movie_id`, `price_id`) VALUES ('2', '11:00:00', '00:30:00', '3', '1');
INSERT INTO `cinema`.`sessions` (`id`, `session_start`, `session_break`, `movie_id`, `price_id`) VALUES ('3', '12:30:00', '00:30:00', '2', '2');
INSERT INTO `cinema`.`sessions` (`id`, `session_start`, `session_break`, `movie_id`, `price_id`) VALUES ('4', '15:00:00', '00:30:00', '1', '3');
INSERT INTO `cinema`.`sessions` (`id`, `session_start`, `session_break`, `movie_id`, `price_id`) VALUES ('5', '17:00:00', '00:30:00', '3', '4');
INSERT INTO `cinema`.`sessions` (`id`, `session_start`, `session_break`, `movie_id`, `price_id`) VALUES ('6', '18:30:00', '00:30:00', '4', '4');
INSERT INTO `cinema`.`sessions` (`id`, `session_start`, `session_break`, `movie_id`, `price_id`) VALUES ('7', '20:00:00', '00:30:00', '3', '4');


INSERT INTO `cinema`.`tickets` (`id`, `sessions_id`, `count`) VALUES ('1', '1', '2');
INSERT INTO `cinema`.`tickets` (`id`, `sessions_id`, `count`) VALUES ('2', '2', '3');
INSERT INTO `cinema`.`tickets` (`id`, `sessions_id`, `count`) VALUES ('3', '3', '1');
INSERT INTO `cinema`.`tickets` (`id`, `sessions_id`, `count`) VALUES ('4', '4', '2');
INSERT INTO `cinema`.`tickets` (`id`, `sessions_id`, `count`) VALUES ('5', '5', '3');
INSERT INTO `cinema`.`tickets` (`id`, `sessions_id`, `count`) VALUES ('6', '6', '2');
INSERT INTO `cinema`.`tickets` (`id`, `sessions_id`, `count`) VALUES ('7', '7', '1');



SELECT m.moviesname, s.session_start, m.long
 FROM sessions s
 join movie m ON  s.movie_id =m.id 
 order by m.long ASC;




 SELECT m.moviesname, s.session_start, s.session_break
 FROM sessions s
 join movie m ON  s.movie_id =m.id 
 order by s.session_break DESC;



 (
 
  SELECT m.id,  m.moviesname, sum(t.count), SUM(p.chanch ) total_sum, AVG(t.count) viewers 
  FROM tickets t
  JOIN sessions s ON s.id = t.sessions_id
   Right join price p ON p.id = s.price_id
   right join movie m ON m.id = s.movie_id
  GROUP BY m.id
  Order by total_sum DESC
  )
    
UNION
-- итоги по каждому полю
SELECT 'TOTAL', count(distinct m.id), sum(t.count), sum(p.chanch), AVG(t.count) viewers 
FROM movie m
 Right JOIN sessions s ON m.id = s.movie_id
Right join price p ON p.id = s.price_id
Right join tickets t ON s.id = t.sessions_id;
  



SELECT m.moviesname,
       SUM(CASE WHEN s.session_start >= "09:00:00" AND s.session_start < "15:00:00" THEN 1 ELSE 0 END) AS "09_15_viewers",
       SUM(CASE WHEN s.session_start >= "09:00:00" AND s.session_start < "15:00:00" THEN p.chanch ELSE 0 END) AS "09_15_fee",
       SUM(CASE WHEN s.session_start >= "15:00:00" AND s.session_start < "18:00:00" THEN 1 ELSE 0 END) AS "15_18_viewers",
       SUM(CASE WHEN s.session_start >= "15:00:00" AND s.session_start < "18:00:00" THEN p.chanch ELSE 0 END) AS "15_18_fee",
       SUM(CASE WHEN s.session_start >= "18:00:00" AND s.session_start < "21:00:00" THEN 1 ELSE 0 END) AS "18_21_viewers",
       SUM(CASE WHEN s.session_start>= "18:00:00" AND s.session_start < "21:00:00" THEN p.chanch ELSE 0 END) AS "18_21_fee",
       SUM(CASE WHEN s.session_start >= "21:00:00" AND s.session_start <= "23:59:59" THEN 1 ELSE 0 END) AS "21_00_viewers",
       SUM(CASE WHEN s.session_start>= "21:00:00" AND s.session_start<= "23:59:59" THEN p.chanch ELSE 0 END) AS "21_00_fee"
FROM tickets t
JOIN sessions s ON s.id = t.sessions_id
right JOIN price p ON p.id = s.price_id
right join movie m ON m.id = s.movie_id
GROUP BY m.id;



